[RunFunc]: Running hyp_get_page_tv_test2 in pkvm-O2/el2.elf
[RunFunc]: Loading pkvm-O2/el2.elf
[RunFunc]: API api{ args = {0 -> {: Struct hyp_page[]}}; ret = none }
[RunFunc]: Loading ABI
[RunFunc]: Computing entry state
[RunFunc]: Start running
[RunFunc]: Run tree:
* Start: 1
* End (PC |retaddr:| is symbolic): 2
State 
    : 1state{
      id = 1;
      base_state = 0;
      last_pc = 0x0;
      regs =
        regmap{
          R0 -> |arg:0| : {: Struct hyp_page[]};
          R1 -> |reg:1:R1|;
          R2 -> |reg:1:R2|;
          R3 -> |reg:1:R3|;
          R4 -> |reg:1:R4|;
          R5 -> |reg:1:R5|;
          R6 -> |reg:1:R6|;
          R7 -> |reg:1:R7|;
          R8 -> |reg:1:R8|;
          R9 -> |reg:1:R9|;
          R10 -> |reg:1:R10|;
          R11 -> |reg:1:R11|;
          R12 -> |reg:1:R12|;
          R13 -> |reg:1:R13|;
          R14 -> |reg:1:R14|;
          R15 -> |reg:1:R15|;
          R16 -> |reg:1:R16|;
          R17 -> |reg:1:R17|;
          R18 -> |reg:1:R18|;
          R19 -> |reg:1:R19|;
          R20 -> |reg:1:R20|;
          R21 -> |reg:1:R21|;
          R22 -> |reg:1:R22|;
          R23 -> |reg:1:R23|;
          R24 -> |reg:1:R24|;
          R25 -> |reg:1:R25|;
          R26 -> |reg:1:R26|;
          R27 -> |reg:1:R27|;
          R28 -> |reg:1:R28|;
          R29 -> |reg:1:R29|;
          R30 -> |retaddr:| : {: somewhere in global};
          R31 -> |reg:0:R31|;
          SP_EL2 -> |reg:1:SP_EL2| : {block 0: frag 0};
          _PC -> |reg:1:_PC|;
          PSTATE.N -> |reg:1:PSTATE.N|;
          PSTATE.Z -> |reg:1:PSTATE.Z|;
          PSTATE.C -> |reg:1:PSTATE.C|;
          PSTATE.V -> |reg:1:PSTATE.V|;
          __highest_el_aarch32 -> false;
          CFG_ID_AA64PFR0_EL1_EL0 -> 0x1:4;
          CFG_ID_AA64PFR0_EL1_EL1 -> 0x1:4;
          CFG_ID_AA64PFR0_EL1_EL2 -> 0x1:4;
          CFG_ID_AA64PFR0_EL1_EL3 -> 0x1:4;
          PSTATE.M -> |reg:0:PSTATE.M|;
          PSTATE.BTYPE -> |reg:0:PSTATE.BTYPE|;
          PSTATE.D -> 0:1;
          PSTATE.J -> |reg:0:PSTATE.J|;
          PSTATE.PAN -> |reg:0:PSTATE.PAN|;
          PSTATE.I -> 0:1;
          PSTATE.nRW -> 0:1;
          PSTATE.IL -> |reg:0:PSTATE.IL|;
          PSTATE.DIT -> |reg:0:PSTATE.DIT|;
          PSTATE.SSBS -> |reg:0:PSTATE.SSBS|;
          PSTATE.F -> 0:1;
          PSTATE.SS -> |reg:0:PSTATE.SS|;
          PSTATE.UAO -> |reg:0:PSTATE.UAO|;
          PSTATE.EL -> -0x2:2;
          PSTATE.GE -> |reg:0:PSTATE.GE|;
          PSTATE.Q -> |reg:0:PSTATE.Q|;
          PSTATE.IT -> |reg:0:PSTATE.IT|;
          PSTATE.TCO -> |reg:0:PSTATE.TCO|;
          PSTATE.A -> 0:1;
          PSTATE.E -> |reg:0:PSTATE.E|;
          PSTATE.SP -> 1:1;
          PSTATE.T -> |reg:0:PSTATE.T|;
          TCR_EL2 -> 0x0;
          HCR_EL2 -> 0x0;
          SCTLR_EL2 -> 0x0;
          MDSCR_EL1 -> 0x0:32;
          MDCR_EL3 -> 0x0:32;
          EDSCR -> 0x0:32;
          OSDLR_EL1 -> 0x0:32;
          SCR_EL3 -> 0x0:32;
          OSLSR_EL1 -> 0x0:32;
          __tlb_enabled -> false;
          __CNTControlBase -> 0x0:52;
          MPIDR_EL1 -> 0x0;
          __trickbox_enabled -> false;
          __PC_changed -> false;
          __currentInstr -> -0x2afcdfe1:32;
          BTypeNext -> |reg:0:BTypeNext|
        };
      fenv = state{ frags = {0 -> frag{}} };
      read_vars = {};
      memory =
        {
          main = symfrag{ trace = []; ccache = {}; scache = {} };
          frags = {0 -> |reg:1:SP_EL2|[0:51] : symfrag{ trace = []; ccache = {}; scache = {} }}
        };
      asserts =
        assert: |reg:1:SP_EL2| u>= 0x1000
        assert: |reg:1:SP_EL2|[52:63] = 0x0:12
        assert: |reg:1:SP_EL2|[0:3] = 0x0:4
    }
State 
    : 2state{
      id = 2;
      base_state = 1;
      last_pc = 0x4093b4;
      regs =
        regmap{
          R0 -> |arg:0| : {: Struct hyp_page[]};
          R1 -> |reg:1:R1|;
          R2 -> |reg:1:R2|;
          R3 -> |reg:1:R3|;
          R4 -> |reg:1:R4|;
          R5 -> |reg:1:R5|;
          R6 -> |reg:1:R6|;
          R7 -> |reg:1:R7|;
          R8 -> 0x0:32.(0x1:32 + |read:2:0:32bits|);
          R9 -> |reg:1:R9|;
          R10 -> |reg:1:R10|;
          R11 -> |reg:1:R11|;
          R12 -> |reg:1:R12|;
          R13 -> |reg:1:R13|;
          R14 -> |reg:1:R14|;
          R15 -> |reg:1:R15|;
          R16 -> |reg:1:R16|;
          R17 -> |reg:1:R17|;
          R18 -> |reg:1:R18|;
          R19 -> |reg:1:R19|;
          R20 -> |reg:1:R20|;
          R21 -> |reg:1:R21|;
          R22 -> |reg:1:R22|;
          R23 -> |reg:1:R23|;
          R24 -> |reg:1:R24|;
          R25 -> |reg:1:R25|;
          R26 -> |reg:1:R26|;
          R27 -> |reg:1:R27|;
          R28 -> |reg:1:R28|;
          R29 -> |reg:1:R29|;
          R30 -> |retaddr:| : {: somewhere in global};
          R31 -> |reg:0:R31|;
          SP_EL2 -> |reg:1:SP_EL2| : {block 0: frag 0};
          _PC -> |retaddr:| : {: somewhere in global};
          PSTATE.N -> |reg:1:PSTATE.N|;
          PSTATE.Z -> |reg:1:PSTATE.Z|;
          PSTATE.C -> |reg:1:PSTATE.C|;
          PSTATE.V -> |reg:1:PSTATE.V|;
          __highest_el_aarch32 -> false;
          CFG_ID_AA64PFR0_EL1_EL0 -> 0x1:4;
          CFG_ID_AA64PFR0_EL1_EL1 -> 0x1:4;
          CFG_ID_AA64PFR0_EL1_EL2 -> 0x1:4;
          CFG_ID_AA64PFR0_EL1_EL3 -> 0x1:4;
          PSTATE.M -> |reg:0:PSTATE.M|;
          PSTATE.BTYPE -> |reg:0:PSTATE.BTYPE|;
          PSTATE.D -> 0:1;
          PSTATE.J -> |reg:0:PSTATE.J|;
          PSTATE.PAN -> |reg:0:PSTATE.PAN|;
          PSTATE.I -> 0:1;
          PSTATE.nRW -> 0:1;
          PSTATE.IL -> |reg:0:PSTATE.IL|;
          PSTATE.DIT -> |reg:0:PSTATE.DIT|;
          PSTATE.SSBS -> |reg:0:PSTATE.SSBS|;
          PSTATE.F -> 0:1;
          PSTATE.SS -> |reg:0:PSTATE.SS|;
          PSTATE.UAO -> |reg:0:PSTATE.UAO|;
          PSTATE.EL -> -0x2:2;
          PSTATE.GE -> |reg:0:PSTATE.GE|;
          PSTATE.Q -> |reg:0:PSTATE.Q|;
          PSTATE.IT -> |reg:0:PSTATE.IT|;
          PSTATE.TCO -> |reg:0:PSTATE.TCO|;
          PSTATE.A -> 0:1;
          PSTATE.E -> |reg:0:PSTATE.E|;
          PSTATE.SP -> 1:1;
          PSTATE.T -> |reg:0:PSTATE.T|;
          TCR_EL2 -> 0x0;
          HCR_EL2 -> 0x0;
          SCTLR_EL2 -> 0x0;
          MDSCR_EL1 -> 0x0:32;
          MDCR_EL3 -> 0x0:32;
          EDSCR -> 0x0:32;
          OSDLR_EL1 -> 0x0:32;
          SCR_EL3 -> 0x0:32;
          OSLSR_EL1 -> 0x0:32;
          __tlb_enabled -> false;
          __CNTControlBase -> 0x0:52;
          MPIDR_EL1 -> 0x0;
          __trickbox_enabled -> false;
          __PC_changed -> true;
          __currentInstr -> -0x2afcdfe1:32;
          BTypeNext -> 0x0:2
        };
      fenv = state{ frags = {0 -> frag{}} };
      read_vars = {0 -> |read:2:0:32bits| : int(s32)};
      memory =
        {
          main =
            symfrag{
              trace =
                [
                  Reading 32 bits in |read:2:0:32bits| from: |arg:0|[0:51] + 0x10;
                  Writing 32 bits with 0x1:32 + |read:2:0:32bits| at |arg:0|[0:51] + 0x10
                ];
              ccache = {};
              scache = {-0x2000000000000000 -> |arg:0|[0:51] + {0x10 -> 0x1:32 + |read:2:0:32bits| of 32 bits}}
            };
          frags = {0 -> |reg:1:SP_EL2|[0:51] : symfrag{ trace = []; ccache = {}; scache = {} }}
        };
      asserts =
        assert: (0x10 + |arg:0|)[52:63] = 0x0:12
        assert: |arg:0| = -0x10 + (0x10 + |arg:0|)[2:63].0x0:2
        assert: (0x10 + |arg:0|)[52:63] = 0x0:12
        assert: |arg:0| = -0x10 + (0x10 + |arg:0|)[2:63].0x0:2
    }
