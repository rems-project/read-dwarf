%==================================================================================%
%  BSD 2-Clause License                                                            %
%                                                                                  %
%  Copyright (c) 2020-2021 Thibaut PÃ©rami                                          %
%  Copyright (c) 2020-2021 Dhruv Makwana                                           %
%  Copyright (c) 2019-2021 Peter Sewell                                            %
%  All rights reserved.                                                            %
%                                                                                  %
%  This software was developed by the University of Cambridge Computer             %
%  Laboratory as part of the Rigorous Engineering of Mainstream Systems            %
%  (REMS) project.                                                                 %
%                                                                                  %
%  This project has been partly funded by EPSRC grant EP/K008528/1.                %
%  This project has received funding from the European Research Council            %
%  (ERC) under the European Union's Horizon 2020 research and innovation           %
%  programme (grant agreement No 789108, ERC Advanced Grant ELVER).                %
%  This project has been partly funded by an EPSRC Doctoral Training studentship.  %
%  This project has been partly funded by Google.                                  %
%                                                                                  %
%  Redistribution and use in source and binary forms, with or without              %
%  modification, are permitted provided that the following conditions              %
%  are met:                                                                        %
%  1. Redistributions of source code must retain the above copyright               %
%     notice, this list of conditions and the following disclaimer.                %
%  2. Redistributions in binary form must reproduce the above copyright            %
%     notice, this list of conditions and the following disclaimer in              %
%     the documentation and/or other materials provided with the                   %
%     distribution.                                                                %
%                                                                                  %
%  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS''              %
%  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED               %
%  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                 %
%  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR             %
%  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,                    %
%  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT                %
%  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF                %
%  USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND             %
%  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,              %
%  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT              %
%  OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF              %
%  SUCH DAMAGE.                                                                    %
%                                                                                  %
%==================================================================================%

% Ott grammar for the internal and Z3 AST of read-dwarf
% need to merged with sections "terminals,annotations,types,bool,operations"
% of isla_lang.ott (handled by dune automatically)

% bounded varaible (by let)
metavar bvar ::=    {{ ocaml string }}
                    {{ lex alphanum }}
                    {{ ocamllex ['a'-'z''A'-'Z']+'!'['0'-'9']+ }}

metavar bvf ::=     {{ ocaml BitVec.t }}
                    {{ phantom }}
                    {{ lex numeric }}
                    {{ ocamllex ('#''b'['0'-'1']+)|('#''x'['0'-'9''a'-'f''A'-'F']+) }}
                    {{ ocamllex-of-string BitVec.of_smt }}
                    {{ pp x = string (BitVec.to_smt x) }}
                    {{ pp-raw x = string (BitVec.to_smt x) }}



metavar flag ::=    {{ ocaml string }}
                    {{ lex alphanum }}
                    {{ ocamllex ':'['a'-'z''A'-'Z''_']+ }}
                    {{ ocamllex-of-string (function s -> (String.sub s 1 (String.length s -1))) }}
                    {{ pp-raw x = colon ^^ string x  }}
                    {{ pp x = colon ^^ string x }}
embed
{{ menhir

%{
[@@ocaml.warning "-33" (* unused open *)]

open Def
%}

}}

{{ocaml-preamble

(* For an unknown reason, Ott generates spurious documentation comments in its output *)
[@@@ocaml.warning "-50" (* unattached documentation comments *)]

}}




grammar
mem_size :: '' ::=                      {{ ocaml 'm }}
                                        {{ phantom }}
                                        {{ pp-raw x = Def.Size.pp_bytes x }}
                                        {{ pp x = Def.Size.pp_bytes x }}
 | int                                  :: :: MSize {{ ocaml Size.of_bytes int }}


bvarith :: '' ::=
  | bvurem_i                            :: :: Bvuremi
  | bvsrem_i                            :: :: Bvsremi
  | bvsmod_i                            :: :: Bvsmodi

% bvcomp :: '' ::=                        {{ ocaml Isla.bvcomp }}

% bvmanyarith :: '' ::=                   {{ ocaml Isla.bvmanyarith }}

binmem :: '' ::=                        {{ auxparam 'm }}
 | select mem_size                      :: :: Select
 | store mem_size                       :: :: Store

%merged with isla_lang
binop :: '' ::=                         {{ auxparam 'm }}
 | binmem                               :: :: Binmem



grammar
var :: '' ::=                           {{ ocaml 'v }}
                                        {{ phantom }}
                                        {{ pp-params ppv }}
                                        {{ pp ppv s = bar ^^ ppv s ^^ bar }}
                                        {{ pp-raw ppv s = ppv s }}
  | name                                :: :: VarName {{ocaml name }}

bbvar :: '' ::=                         {{ ocaml 'b }}
                                        {{ phantom }}
                                        {{ pp s = string s}}
                                        {{ pp-raw s = string s }}
  | bvar                                :: :: BVarName {{ocaml bvar }}

bind :: '' ::=                          {{ phantom }}
                                        {{ ocaml ('b * ('a, 'v, 'b, 'm) exp) }}
                                        {{ pp-params ppv }}
                                        {{ pp ppv se = let (n,v) = se in
                                                   parens (pp_bbvar n ^^ blank 1 ^^ pp_exp ppv v) }}
                                        {{ pp-raw ppv se = let (n,v) = se in
                                                       pp_raw_bbvar n ^^ !^"," ^^ pp_raw_exp ppv v }}
 | ( bbvar exp )                        :: :: Struct_elem {{ ocaml (bbvar,exp) }}


exp :: '' ::=                           {{ aux _ annot }}
                                        {{ auxparam ('a, 'v, 'b, 'm) }}
                                        {{ pp-params ppv }}
                                        {{ menhir-start }}
                                        {{ menhir-start-type Def.rexp }}
  | var                                 :: :: Var
  | bbvar                               :: :: Bound
  | bvf                                 :: :: Bits
  | bool                                :: :: Bool
  | enum                                :: :: Enum
  | ( unop exp )                        :: :: Unop
  | ( binop exp1 exp2 )                 :: :: Binop
  | ( manyop exp1 .. expj )             :: :: Manyop
  | ( exp1 .. expj )                    :: :: Vec
  | ( ite exp1 exp2 exp3 )              :: :: Ite
  | ( let ( bind bind1 .. bindj ) exp2 ) :: :: Let


ty :: 'Ty_' ::=                         {{ auxparam 'm }}
  | Mem mem_size                        :: :: Mem

%%%%% smt %%%%%
grammar

fbool :: '' ::=                         {{ ocaml (string * bool) }}
                                        {{ phantom }}
                                        {{ pp se = let (f,b) = se in
                                             group(pp_flag f ^^ blank 1 ^^ pp_bool b) }}
                                        {{ pp-raw se = let (f,b) = se in
                                             group(pp_raw_flag f ^^ blank 1 ^^ pp_raw_bool b) }}
  | flag bool                           :: :: FlagBool {{ ocaml (flag, bool) }}

smt :: '' ::=                           {{ auxparam ('a, 'v, 'b, 'm) }}
                                        {{ pp-params ppv }}
                                        {{ menhir-start }}
                                        {{ menhir-start-type Def.rsmt }}
  | ( declare-const var ty )            :: :: DeclareConst
  | ( define-const var exp )            :: :: DefineConst
  | ( assert exp )                      :: :: Assert
  | ( simplify exp fbool1 .. fboolj )   :: :: Simplify
  | ( push )                            :: :: Push
  | ( pop )                             :: :: Pop
  | ( get-info :version )               :: :: GetVersion
  | ( check-sat )                       :: :: CheckSat
  | ( exit )                            :: :: Exit

smts :: '' ::=                          {{ ocaml ('a, 'v, 'b, 'm) smt list }}
                                        {{ phantom }}
                                        {{ pp-params ppv }}
                                        {{ menhir-start }}
                                        {{ menhir-start-type Def.rsmt list }}
                                        {{ pp ppv x = x |> List.map (pp_smt ppv) |> separate hardline }}
                                        {{ pp-raw ppv x = x |> List.map (pp_raw_smt ppv) |> separate hardline }}
  | smt1 .. smtj                        :: :: Smts {{ ocaml smt0 }}

smt_ans :: '' ::=                       {{ auxparam ('a, 'v, 'b, 'm) }}
                                        {{ pp-params ppv }}
                                        {{ menhir-start }}
                                        {{ menhir-start-type Def.rsmt_ans }}
  | ( error str )                       :: :: Error
  | ( :version str )                    :: :: Version
  | sat                                 :: :: Sat
  | unsat                               :: :: Unsat
  | unknown                             :: :: Unknown
  | unsupported                         :: :: Unsupported
  | exp                                 :: :: Exp
